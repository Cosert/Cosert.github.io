<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Round 618 div.2(div.1 A-C)题解</title>
    <url>/2020/02/13/CF-618/</url>
    <content><![CDATA[<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>　　这场难度比其他的div2低，A、B、E都只需要在思维上绕一个小弯就可以轻松AC，D<br>题因为考到相似图形的特点可能会卡住，个人认为最难的是C题，因为规律难找。<br><a id="more"></a><br>　　本人因为菜的缘jie故kou，做A题用了10分钟找漏洞，B题想了半小时，交完过预测试已经只剩一小时了。做C被卡住剩半小时跳E题，最后因E题写太慢，两题结果(果然菜就是菜，题目多简单都是一个结果qwq)。但是618的题目确实弯路不多，据说div1场几乎所有的人都3题。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Non-zero"><a href="#A-Non-zero" class="headerlink" title="A. Non-zero"></a><a href="https://codeforces.com/contest/1300/problem/A" target="_blank" rel="noopener">A. Non-zero</a></h3><p>time limit per test:1 second<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p>
<p>　　这题能进行的操作只有在某个数上加1(注意只能加不能减)。操作的结果需在操作数最少的情况下使数组内所有数的和和积都为0。可以很容易地想到要让数组中所有的0都变为1且各数相加和不为0。</p>
<p>　　记录数组所有数的和和0的数量，操作数此时为0的数量，如果和加上0的数量刚好为0，则操作数再加1。</p>
<pre><code>上代码:
</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n,a[150];</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int T;scanf(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        int down=0,up=0,c0=0,op=0; //可以简化为各数的和，然后直接比对数的和加上0的个数是否得0</span><br><span class="line">        <span class="keyword">for</span>(int i=1;i&lt;=n;i++) &#123;</span><br><span class="line">            scanf(<span class="string">"%d"</span>,a+i);</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;0) down+=a[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;0) up+=a[i];</span><br><span class="line">            <span class="keyword">if</span>(!a[i]) &#123;</span><br><span class="line">                c0++;</span><br><span class="line">                i--;n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(up==down*-1 || c0&gt;0) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c0&gt;0) &#123;</span><br><span class="line">                down+=c0;</span><br><span class="line">                op+=c0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(up+down==0) op++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,op);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-Assigning-to-Classes"><a href="#B-Assigning-to-Classes" class="headerlink" title="B. Assigning to Classes"></a><a href="https://codeforces.com/contest/1300/problem/B" target="_blank" rel="noopener">B. Assigning to Classes</a></h3><p>time limit per test:2 seconds<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p>
<p>　　题目大意是要求将n*2个学生分成若干个班，使各班学生智商水平的中位数差的绝对值之和最小，其中各班学生的数量必须为奇数。</p>
<p>　　中位数指的是一列数量为奇数且数字从小到大排的数组中靠中间的数，题目定义为第n+1个数。第一个样例打破了思维限制，提示你可以分出只有一个学生的班级，通过对样例分析会发现结果总是中间的两数相减。不难想到，如果分成三或更多班级，势必导致更多的差值产生，因此只需分两班，为保证差值最小，将全体2n个学生中数值第n大的学生拿出来单独排班，与第n+1大的学生相减的绝对值为最小差值。</p>
<p>　　上代码:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define maxn 200000</span></span><br><span class="line"></span><br><span class="line">int n,a[maxn+1];</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int T;scanf(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        int hi=n;n&lt;&lt;=1;</span><br><span class="line">        <span class="keyword">for</span>(int i=1;i&lt;=n;i++) scanf(<span class="string">"%d"</span>,a+i);</span><br><span class="line"></span><br><span class="line">        sort(a+1,a+n+1);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,abs(a[hi+1]-a[hi]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="补题-Div-1-A-C-Anu-Has-a-Function"><a href="#补题-Div-1-A-C-Anu-Has-a-Function" class="headerlink" title="(补题) (Div.1 A)C. Anu Has a Function"></a>(补题) <a href="https://codeforces.com/contest/1300/problem/C" target="_blank" rel="noopener">(Div.1 A)C. Anu Has a Function</a></h3><p>time limit per test:1 second<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p>
<p>  给你n个数，要求重新排列，使第一个数对后面每一个数进行“或”操作并减去之后得到的值最大。</p>
<p>  一开始找规律，甚至联系了好基友帮忙找规律，都没有看出来，然后去E题了。。。</p>
<p>  补题的时候看了下别人的博客，把思路给理清了。大体的操作是这样的:</p>
<pre><code>假定f(a,b) a=12,b=6

1.两个数的二进制位对上，a中没有1 b中有1的位变为1。

      12    1 1 0 0
       6    0 1 1 0
--------------------
      14    1 1 1 0

2.两数相减，关键点来了:就是将b中有1的位归为0。

      14    1 1 1 0
       6    0 1 1 0
--------------------
       8    1 0 0 0
</code></pre><p>  咳咳咳，言简意赅就是把a将b的二进制位有1的位化为0。那么，如果第一个数有一个位的1是后面其他的数在该位都没有的，那么这个数的这个1将会一直保留到最后。因此我们需要去找符合这个情况的数。</p>
<p>  遍历一遍数组，记录每个位的1的出现的次数，如果碰到有出现1的次数仅为1的位，需找的这个数并提前到第一个，剩下的数随意输出。</p>
<p>  参考博客:<a href="">CSDN(抱歉原博找不到了,日后放链接)</a><br>  代码:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define maxn 100000</span></span><br><span class="line"></span><br><span class="line">int n,a[maxn+1],dig[33]=&#123;0&#125;,cnt=0;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    //<span class="keyword">for</span>(int i=1;i&lt;=32;i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>,dig[i]);</span><br><span class="line">    //<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=1;i&lt;=n;i++) &#123;</span><br><span class="line">        scanf(<span class="string">"%d"</span>,a+i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int j=1;j&lt;=32;j++) &#123; </span><br><span class="line">            <span class="keyword">if</span>((a[i]&gt;&gt;(j-1))&amp;1) dig[j]++; //不断地退位，发现有1则将该位的出现1的次数加一，由于最大数1e9对应位数32位，时间复杂度不会超出限制！</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int t;</span><br><span class="line">    <span class="keyword">for</span>(t=32;t&gt;=1;t--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dig[t]==1) <span class="built_in">break</span>; //找最高位</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!t) <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[n]);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i=1;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((a[i]&gt;&gt;(t-1))&amp;1) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=n) swap(a[i],a[n]);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[n]);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=1;i&lt;=n-1;i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>,a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="补题-Div-1-B-D-Aerodynamic"><a href="#补题-Div-1-B-D-Aerodynamic" class="headerlink" title="(补题) (Div.1 B)D. Aerodynamic"></a>(补题) <a href="https://codeforces.com/contest/1300/problem/D" target="_blank" rel="noopener">(Div.1 B)D. Aerodynamic</a></h3><p>time limit per test:1 second<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p>
<p>　　只要这个图形满足中心对称就一定可以满足大图形相似！</p>
<p>　　题目不好描述，但其实观察发现，如果将图形翻转180度后仍能跟原图重合，那么按照操作形成的图形一定是原图放大得来的(相似)。我判断是否为原图的做法是将第n/2+1个点反转并与第一个点连边形成向量，如果第n/2+i个点与第i个点形成的向量与之不相同，那么不满足中心对称。</p>
<p>　　一开始看到以为是计算几何，被吓跑了，后来经大佬提示和自己思考发现原来是一道很好做的计算几何(草)。</p>
<p>  代码:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define maxn 100000</span></span><br><span class="line"></span><br><span class="line">int n,x[maxn+1],y[maxn+1];</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int a,b,v,c;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&amp;1) &#123;</span><br><span class="line">        <span class="keyword">while</span>(n--) scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b); //奇数边一定不满足中心对称条件</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"nO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i=1;i&lt;=(n&gt;&gt;1);i++) scanf(<span class="string">"%d%d"</span>,x+i,y+i);</span><br><span class="line">        scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        v=x[1]-(a*-1);</span><br><span class="line">        c=y[1]-(b*-1);</span><br><span class="line"></span><br><span class="line">        bool sim=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int i=2;i&lt;=(n&gt;&gt;1);i++) &#123;</span><br><span class="line">            scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sim &amp;&amp; (x[i]-(a*-1)!=v || y[i]-(b*-1)!=c)) sim=<span class="literal">false</span>; //判断横坐标、纵坐标之差，与第一个组合不相同即不满足中心对称。</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sim) <span class="built_in">printf</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="补题-Div-1-C-E-Water-Balance"><a href="#补题-Div-1-C-E-Water-Balance" class="headerlink" title="(补题) (Div.1 C)E. Water Balance"></a>(补题) <a href="https://codeforces.com/contest/1300/problem/E" target="_blank" rel="noopener">(Div.1 C)E. Water Balance</a></h3><p>time limit per test:3 seconds<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p>
<p>　　言简意赅，给你一组数，开始以整数形式输入，可以将一个区间的数加起来取平均，要求通过合理操作将这组数的<a href="https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F" target="_blank" rel="noopener">字典序</a>降到最小。</p>
<p>　　从第二个数开始遍历，如果比前一个(组)数小，则与前一个数取平均合并；前一个数再它的前一个数进行判断，并重复平均操作。目的是将靠前较大的数的值分给后面的数字，使前面的数尽可能小。用pair数组记录参与平均值操作的数的数量即可。</p>
<p>  代码:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define pdi pair&lt;double,int&gt;</span></span><br><span class="line">const int maxn=1000000;</span><br><span class="line"></span><br><span class="line">int n,a;</span><br><span class="line">pdi s[maxn+1];</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    scanf(<span class="string">"%lf"</span>,&amp;s[1].first);</span><br><span class="line">    s[1].second=1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=2;i&lt;=n;i++) &#123;</span><br><span class="line">        scanf(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">        s[i].first=a;s[i].second=1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int j=i;j&gt;=2;j--) &#123; //前一个数更新后还得再与更前面的数比较，使前面的值尽可能被分走</span><br><span class="line">            <span class="keyword">if</span>(s[j-1].first&lt;s[j].first) <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                int l1=s[j-1].second,l2=s[j].second;</span><br><span class="line">                s[j-1].second=l1+l2;</span><br><span class="line">                s[j-1].first=((s[j-1].first*l1)+(s[j].first*l2))/(l1+l2); //平分操作，记得将数量加起来除，否则出错</span><br><span class="line">                i--;n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=1;i&lt;=n;i++) &#123;</span><br><span class="line">        double k=s[i].first;int len=s[i].second;</span><br><span class="line">        <span class="keyword">for</span>(int j=1;j&lt;=len;j++) <span class="built_in">printf</span>(<span class="string">"%.9f\n"</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　这道题挺水的，可惜最后几秒没给交上。可能是大佬秒杀二进制运算外加B和C比较水的缘故，div1大多数人拿到了至少3题。</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Codeforces</tag>
        <tag>div2</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 620 div.2题解(补题)</title>
    <url>/2020/02/16/CF-620/</url>
    <content><![CDATA[<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>　　挺自闭的一场，最好的情况下可以拿到三道题。B题因为回文串不熟练花了一个小时，C题算法出现漏洞，两次WA错失机会！</p>
<a id="more"></a>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Two-Rabbits"><a href="#A-Two-Rabbits" class="headerlink" title="A. Two Rabbits"></a><a href="https://codeforces.com/contest/1304/problem/A" target="_blank" rel="noopener">A. Two Rabbits</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　很简单，等价于a+b能不能被y和x的差值整除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int d,x,y,a,b;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int T;scanf(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        scanf(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line">        d=abs(x-y);</span><br><span class="line">        <span class="keyword">if</span>(d%(a+b)) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,d/(a+b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-Longest-Palindrome"><a href="#B-Longest-Palindrome" class="headerlink" title="B. Longest Palindrome"></a><a href="https://codeforces.com/contest/1304/problem/B" target="_blank" rel="noopener">B. Longest Palindrome</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　对字符串类题目熟练的人应该是秒过，可以本人在判断部分漏洞百出，花了一个小时后跳去C题了。判断一个字符串与之前的字符串的反文是否一致，一致则加入队列。注意当m=1时任意一个字符都可以作为回文的中心！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define maxn 100</span></span><br><span class="line"><span class="comment">#define maxm 50</span></span><br><span class="line"></span><br><span class="line">int n,m;</span><br><span class="line">char s[101][51],rs[101][51],c[101],lic[101];</span><br><span class="line">int lis[101],mid[101],cnt=0,mcnt=0;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    mid[0]=-1;</span><br><span class="line">    scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    </span><br><span class="line">    //<span class="keyword">if</span>(m!=1) &#123;</span><br><span class="line">    scanf(<span class="string">"%s"</span>,s[1]);</span><br><span class="line">    <span class="keyword">for</span>(int j=0;j&lt;=m-1;j++) rs[1][m-j-1]=s[1][j]; //建立一个字符顺序相反的串</span><br><span class="line">    <span class="keyword">if</span>(!strcmp(s[1],rs[1])) &#123; //判断字符串本身是不是回文</span><br><span class="line">        //<span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">        mcnt++;</span><br><span class="line">        mid[mcnt]=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=2;i&lt;=n;i++) &#123;</span><br><span class="line">        scanf(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">        <span class="keyword">for</span>(int j=0;j&lt;=m-1;j++) rs[i][m-j-1]=s[i][j];</span><br><span class="line">        </span><br><span class="line">        bool mys=1;        </span><br><span class="line">        <span class="keyword">for</span>(int j=1;j&lt;=i-1;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!strcmp(s[i],rs[j])) &#123;</span><br><span class="line">                //<span class="built_in">printf</span>(<span class="string">"%d %d match\n"</span>,j,i); </span><br><span class="line">                cnt++;lis[cnt]=j;</span><br><span class="line">                i--;</span><br><span class="line">                n--;</span><br><span class="line">                rs[j][0]=<span class="string">'0'</span>;</span><br><span class="line">                mys=0;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mys) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!strcmp(s[i],rs[i])) &#123;</span><br><span class="line">                //<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">                mcnt++;</span><br><span class="line">                mid[mcnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int sum=cnt*m*2;</span><br><span class="line">    //<span class="built_in">printf</span>(<span class="string">"c %d\n"</span>,cnt);</span><br><span class="line">    //<span class="built_in">printf</span>(<span class="string">"mc %d\n"</span>,mcnt); //这些注释都是调试时留下的，很明显地可以看出错了很多次！</span><br><span class="line">    <span class="keyword">for</span>(int i=1;i&lt;=mcnt;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rs[mid[i]][0]==<span class="string">'0'</span>) <span class="built_in">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            mid[0]=mid[i];</span><br><span class="line">            //<span class="built_in">printf</span>(<span class="string">"cho %d\n"</span>,mid[0]);</span><br><span class="line">            sum+=m;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=1;i&lt;=cnt;i++) <span class="built_in">printf</span>(<span class="string">"%s"</span>,s[lis[i]]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(mid[0]!=-1) <span class="built_in">printf</span>(<span class="string">"%s"</span>,s[mid[0]]);</span><br><span class="line"></span><br><span class="line">    //<span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(int i=cnt;i&gt;=1;i--) &#123;</span><br><span class="line">        rs[lis[i]][0]=s[lis[i]][m-1];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,rs[lis[i]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">    //&#125;</span><br><span class="line">    /*<span class="keyword">else</span> &#123; //原定用来特判单字符回文串的部分--其实用上面的写法可以轻松判断出！</span><br><span class="line">        int last=-1;</span><br><span class="line">        scanf(<span class="string">"%c"</span>,&amp;c[1]);</span><br><span class="line">        last=1;</span><br><span class="line">        <span class="keyword">for</span>(int i=2;i&lt;=n;i++) &#123;</span><br><span class="line">            scanf(<span class="string">"%c"</span>,&amp;c[i]);</span><br><span class="line">            <span class="keyword">for</span>(int j=1;j&lt;=n-1;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(c[j]==c[i]) &#123;</span><br><span class="line">                    lic[++cnt]=c[j];</span><br><span class="line">                    c[j]=<span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">if</span>(last==j) &#123;</span><br><span class="line">                        last++;</span><br><span class="line">                        <span class="keyword">for</span>(int k=last;k&lt;=n-1;k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(c[k]&gt;=<span class="string">'a'</span> &amp;&amp; c[k]&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">                                last=k;</span><br><span class="line">                                <span class="built_in">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(k==n-1) last=-1;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    i--;</span><br><span class="line">                    n--;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int sum=0;</span><br><span class="line">        <span class="keyword">for</span>(int i=1;i&lt;=cnt;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[i]);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(last!=-1) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[last]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i=cnt;i&gt;=1;i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[i]);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;*/</span><br></pre></td></tr></table></figure>
<h3 id="C-Air-Conditioner"><a href="#C-Air-Conditioner" class="headerlink" title="C. Air Conditioner"></a><a href="https://codeforces.com/contest/1304/problem/C" target="_blank" rel="noopener">C. Air Conditioner</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　唯一的难点在于客人的需求在一个区间内，只要值在这个区间内都可以使客人满足！而不同的区间有可能存在t1不能及时改变温度到区间而t2可以(t1、t2都属于上个客人两种可能的温度，时间间隔足够温度可以在区间内调整)。<br>　　使用两个变量，分别记录第n个客人来时可以达到的最低温度和最高温度。如果出现最高温度小于最低需求温度/最低温度大于最高需求温度，那么无论如何都无法满足第n个客人的需求。<br>　　比赛时用了很复杂的语句来实现上述判断。结果提交时出现莫名其妙的错误。后来看了出题人的结果，想法一样，出题人用了更简单的语句实现。所以说代码表达一定要等效简练(指相同的执行结果，更加简单的写法)！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma GCC optimize("O2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define inf 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line">int n,m;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int T;scanf(<span class="string">"%d"</span>,&amp;T);int Tc=1;</span><br><span class="line">    <span class="keyword">for</span>(Tc=1;Tc&lt;=T;Tc++) &#123;</span><br><span class="line">        scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        int l=m,h=m,no=0,tp=0;</span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">            //<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">            int t,ti,a,b;</span><br><span class="line">            scanf(<span class="string">"%d%d%d"</span>,&amp;ti,&amp;a,&amp;b);</span><br><span class="line">            t=ti-tp;</span><br><span class="line">            tp=ti;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!no) &#123;</span><br><span class="line">                h+=t;l-=t;</span><br><span class="line">                <span class="keyword">if</span>(l&gt;b || h&lt;a) &#123; //与出题人代码唯一不同之处:出题人只用了这里的两句完成了判断，我用了行数至少两倍的代码</span><br><span class="line">                    no=1;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                l=max(l,a);h=min(h,b); //温度不能低于或高于当前所需的温度范围！</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(no) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>D、E、F正在慢慢补题，可能在下个周末放出(E只需判断是否出现剩余需遍历边数量为偶数，但是解法出现未知错误qwq)。</p>
<h3 id="D-Shortest-and-Longest-LIS"><a href="#D-Shortest-and-Longest-LIS" class="headerlink" title="D. Shortest and Longest LIS"></a><a href="https://codeforces.com/contest/1304/problem/D" target="_blank" rel="noopener">D. Shortest and Longest LIS</a></h3><p>time limit per test: 3 seconds<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Codeforces</tag>
        <tag>div2</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 628 div.2 题解</title>
    <url>/2020/03/15/CF-628/</url>
    <content><![CDATA[<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>　　A题差点不会做，C题看不懂题意。结果D题写慢了。于是这次又是只有两题。悲催啊。<br><a id="more"></a>　　</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-EhAb-AnD-gCd"><a href="#A-EhAb-AnD-gCd" class="headerlink" title="A. EhAb AnD gCd"></a><a href="https://codeforces.com/contest/1325/problem/A" target="_blank" rel="noopener">A. EhAb AnD gCd</a></h3><p>time limit per test:1 second<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p>
<p>　　直接上结论: 给定 n&gt;=1，则 gcd(1,n)+lcm(1,n)=n+1，因为 1 和 n 互质，因此最大公因数是 1，最小公倍数当然就是 n 啦。</p>
<p>　　不说了上代码。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">sti</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _neg=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd == <span class="string">'-'</span>) &#123;_neg=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd&gt;=<span class="string">'0'</span> &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span> + (_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_neg) &#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sto</span><span class="params">(_tp _var, <span class="keyword">int</span> _nline=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; </span><br><span class="line">    <span class="keyword">do</span>&#123; _wri[_tpi++] = (<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125; <span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nline) &#123;<span class="keyword">if</span>(_nline==<span class="number">2</span>) &#123;<span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcases() for(int Case=sti(Case), tcs=1; tcs&lt;=Case; tcs++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mcases() sti(n), sto(<span class="number">1</span>, <span class="number">2</span>), sto(n<span class="number">-1</span>, <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　看了下题解，出题人又出了一个新的问题: 满足 gcd(x,y)+lcm(x,y)=n 的 (x,y) 有多少对呢? </p>
<h3 id="B-CopyCopyCopyCopyCopy"><a href="#B-CopyCopyCopyCopyCopy" class="headerlink" title="B. CopyCopyCopyCopyCopy"></a><a href="https://codeforces.com/contest/1325/problem/B" target="_blank" rel="noopener">B. CopyCopyCopyCopyCopy</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　含有 n 个成员的序列被复制为原来的 n 倍，求最长上升子序列。相当于从中挑 n 个数组成最长上升子序列。去重复即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">sti</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _neg=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd == <span class="string">'-'</span>) &#123;_neg=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd&gt;=<span class="string">'0'</span> &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span> + (_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_neg) &#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sto</span><span class="params">(_tp _var, <span class="keyword">int</span> _nline=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; </span><br><span class="line">    <span class="keyword">do</span>&#123; _wri[_tpi++] = (<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125; <span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nline) &#123;<span class="keyword">if</span>(_nline==<span class="number">2</span>) &#123;<span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcases() for(int Case=sti(Case), tcs=1; tcs&lt;=Case; tcs++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; </span><br><span class="line"><span class="keyword">int</span> a[maxn|<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mcases() &#123; </span><br><span class="line">        sti(n); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) sti(a[i]); </span><br><span class="line"></span><br><span class="line">        sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>);  <span class="comment">//非最优解法。只需要去除重复的数并重新计算序列个数即可</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) <span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]) ans++; </span><br><span class="line"></span><br><span class="line">        sto(ans, <span class="number">1</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="补题-C-Ehab-and-Path-etic-MEXs"><a href="#补题-C-Ehab-and-Path-etic-MEXs" class="headerlink" title="(补题) C. Ehab and Path-etic MEXs"></a>(补题) <a href="https://codeforces.com/contest/1325/problem/C" target="_blank" rel="noopener">C. Ehab and Path-etic MEXs</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<pre><code>不会不会。
</code></pre><h3 id="补题-D-Ehab-the-Xorcist"><a href="#补题-D-Ehab-the-Xorcist" class="headerlink" title="(补题) D. Ehab the Xorcist"></a>(补题) <a href="https://codeforces.com/contest/1325/problem/D" target="_blank" rel="noopener">D. Ehab the Xorcist</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　没来得及写出来(大悲)。求最短的序列，使第一个数异或剩下的数后得到 n，且相加之和得 m。</p>
<p>　　异或操作得到某个数需要一个大于或等于这个数的数。因此当 n&gt;m 时无解。此外，当 n 与 m 相等时，只需要 n 本身。<br>　　设 n 为序列第一个数，并求 k=n-m，通过平分 k 使 n 进行异或操作后。如果 k 为奇数，那么将无法将 k 分为偶数份使 n 进行异或操作后保持原样。将 k 分为两份。如果 k/2 的二进制位上有 1 的位置在 n 的对应位置是 0，则可以合并 n 和其中一个 k/2，这样序列的长度只有二。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">sti</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _neg=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd == <span class="string">'-'</span>) &#123;_neg=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd&gt;=<span class="string">'0'</span> &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span> + (_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_neg) &#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sto</span><span class="params">(_tp _var, <span class="keyword">int</span> _nline=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; </span><br><span class="line">    <span class="keyword">do</span>&#123; _wri[_tpi++] = (<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125; <span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nline) &#123;<span class="keyword">if</span>(_nline==<span class="number">2</span>) &#123;<span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdi pair<span class="meta-string">&lt;double, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pid pair<span class="meta-string">&lt;int, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pli pair<span class="meta-string">&lt;ll, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pil pair<span class="meta-string">&lt;int, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll pair<span class="meta-string">&lt;ll, ll&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000</span></span><br><span class="line"></span><br><span class="line">ll n, m, s[maxn+<span class="number">15</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    sti(n), sti(m); </span><br><span class="line">    <span class="keyword">if</span>(n&gt;m) sto(<span class="number">-1</span>); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==m) &#123;<span class="keyword">if</span>(n==<span class="number">0</span>) sto(<span class="number">0</span>); <span class="keyword">else</span> sto(<span class="number">1</span>, <span class="number">1</span>), sto(n); &#125;  <span class="comment">//n=m=0 时只有一行</span></span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        ll k=m-n, p, cnt=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) sto(<span class="number">-1</span>, <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            p=k/<span class="number">2</span>; </span><br><span class="line">            cnt=<span class="number">2</span>; </span><br><span class="line">            <span class="keyword">if</span>(((n|p)^p)==n) n|=p, cnt=<span class="number">1</span>;  <span class="comment">//特判</span></span><br><span class="line">            sto(cnt+<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">            sto(n, <span class="number">2</span>); </span><br><span class="line">            <span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=cnt; i++) sto(p, <span class="number">2</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="补题-E-Ehab’s-REAL-Number-Theory-Problem"><a href="#补题-E-Ehab’s-REAL-Number-Theory-Problem" class="headerlink" title="(补题) E. Ehab’s REAL Number Theory Problem"></a>(补题) <a href="https://codeforces.com/contest/1325/problem/E" target="_blank" rel="noopener">E. Ehab’s REAL Number Theory Problem</a></h3><p>time limit per test: 3 seconds<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Codeforces</tag>
        <tag>div2</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 83 A-C题解</title>
    <url>/2020/03/10/CF-EDU-83/</url>
    <content><![CDATA[<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>　　一如既往的菜。赛前超自信，赛后三道题(指比赛做两道打完后才出三道)。先把 A、B、C 题解出了。之前 620和其他几场比赛的题解不知道什么时候补的上qwq。</p>
<a id="more"></a>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Two-Regular-Polygons"><a href="#A-Two-Regular-Polygons" class="headerlink" title="A. Two Regular Polygons"></a><a href="https://codeforces.com/contest/1312/problem/A" target="_blank" rel="noopener">A. Two Regular Polygons</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　看图，试想用m边形的边平分n边形。看能不能使m边形边外的图形全等。结论是: 当m是n的因子时，可满足等角等边。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">sti</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _neg=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd == <span class="string">'-'</span>) &#123;_neg=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd&gt;=<span class="string">'0'</span> &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span> + (_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_neg) &#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sto</span><span class="params">(_tp _var, <span class="keyword">int</span> _nline=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; </span><br><span class="line">    <span class="keyword">do</span>&#123; _wri[_tpi++] = (<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125; <span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nline) &#123;<span class="keyword">if</span>(_nline==<span class="number">2</span>) &#123;<span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcases() for(int Case=sti(Case), tcs=1; tcs&lt;=Case; tcs++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mcases() &#123; </span><br><span class="line">        sti(n), sti(m); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n%m==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>); </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-Bogosort"><a href="#B-Bogosort" class="headerlink" title="B. Bogosort"></a><a href="https://codeforces.com/contest/1312/problem/B" target="_blank" rel="noopener">B. Bogosort</a></h3><p>time limit per test: 2 seconds<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　一开始很懵逼。但是研究下标就可以发现，设 f(i)=i，f(i) 是单点递增的，且 f’(i)=1。想要保证任意两个差值不为 0，则令 g(i)=a[i] 单调递减，使 F(i)=g(i)-f(i) 能够单调递减。由于 f’(i)=1，就算数组 a 出现两个相同的数 a[i] 和 a[i+x]，i 和 i+x 也是不一样的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">sti</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _neg=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd == <span class="string">'-'</span>) &#123;_neg=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd&gt;=<span class="string">'0'</span> &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span> + (_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_neg) &#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sto</span><span class="params">(_tp _var, <span class="keyword">int</span> _nline=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; </span><br><span class="line">    <span class="keyword">do</span>&#123; _wri[_tpi++] = (<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125; <span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nline) &#123;<span class="keyword">if</span>(_nline==<span class="number">2</span>) &#123;<span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcases() for(int Case=sti(Case), tcs=1; tcs&lt;=Case; tcs++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; </span><br><span class="line"><span class="keyword">int</span> a[maxn|<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mcases() &#123; </span><br><span class="line">        sti(n); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) sti(a[i]); </span><br><span class="line"></span><br><span class="line">        sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--) sto(a[i], <span class="number">2</span>); </span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="补题-C-Adding-Powers"><a href="#补题-C-Adding-Powers" class="headerlink" title="(补题) C. Adding Powers"></a><a href="https://codeforces.com/contest/1312/problem/C" target="_blank" rel="noopener">(补题) C. Adding Powers</a></h3><p>time limit per test: 1 second<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output</p>
<p>　　实质是问数组 a 的数之和是否是由 k^0 + k^1 + k^2 + … + k^i得到的。<br>　　那么将 k^i 打表。接着每遍历到一个 a[i] 满足 a[i]&gt;0，则从 i(max) 往下遍历，询问 a[i]-k^i 是否大于或等于 0，满足条件时将 k^i打上标记，并将 a[i]减去k^i。重复上述操作直至 k^0 的情况被处理完(从高到低遍历的目的是避免较小的数分走 a[i] 导致更大的 k^i 没法匹配)。如果出现处理后 a[i] 仍大于 0 或 k^i 已经用过的情况。测不符合前面的推论。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">sti</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _neg=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd == <span class="string">'-'</span>) &#123;_neg=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd&gt;=<span class="string">'0'</span> &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span> + (_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_neg) &#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sto</span><span class="params">(_tp _var, <span class="keyword">int</span> _nline=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; </span><br><span class="line">    <span class="keyword">do</span>&#123; _wri[_tpi++] = (<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125; <span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nline) &#123;<span class="keyword">if</span>(_nline==<span class="number">2</span>) &#123;<span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcases() for(int Case=sti(Case), tcs=1; tcs&lt;=Case; tcs++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> doub double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">10000000000000000</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"></span><br><span class="line">ll n, m; </span><br><span class="line">ll a[maxn|<span class="number">1</span>], pwr[<span class="number">65</span>]=&#123;<span class="number">0</span>&#125;, p; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    pwr[<span class="number">0</span>]=<span class="number">1</span>; </span><br><span class="line">    pwr[<span class="number">1</span>]=m; </span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>; i&lt;=<span class="number">64</span>; i++) &#123; </span><br><span class="line">        <span class="keyword">if</span>(pwr[i<span class="number">-1</span>]*m&lt;=inf) pwr[i]=pwr[i<span class="number">-1</span>]*m; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            p=i<span class="number">-1</span>; </span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mcases() &#123; </span><br><span class="line">        sti(n), sti(m); </span><br><span class="line">        init(); </span><br><span class="line">        <span class="keyword">bool</span> t[p+<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;, flag=<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=n; i++) &#123; </span><br><span class="line">            sti(a[i]); </span><br><span class="line">            <span class="keyword">if</span>(flag) &#123; </span><br><span class="line">                <span class="keyword">for</span>(ll j=p; j&gt;=<span class="number">0</span>; j--) &#123; </span><br><span class="line">                    <span class="keyword">if</span>(a[i]-pwr[j]&gt;=<span class="number">0</span>) &#123; </span><br><span class="line">                        <span class="keyword">if</span>(t[j]) flag=<span class="number">0</span>; </span><br><span class="line">                        t[j]=<span class="number">1</span>; </span><br><span class="line">                        a[i]-=pwr[j]; </span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">if</span>(!a[i]) <span class="keyword">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>) flag=<span class="number">0</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>); </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(待填坑)</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Codeforces</tag>
        <tag>div2</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Code Jam 2020 总结</title>
    <url>/2020/05/04/GCJ2020summary/</url>
    <content><![CDATA[<p>　　今年的 Google Code Jam 赛季草草结束了。由于先天能力上的缺失，平时积累的不足，加上赛期准备不充分，我的赛季止步于 Round 1。我通过参加 GCJ 比赛增长见识，提高自己的代码能力，受益匪浅。</p>
<a id="more"></a>
<h2 id="赛期经历"><a href="#赛期经历" class="headerlink" title="赛期经历"></a>赛期经历</h2><p>　　四月三日得知有谷歌的比赛，便匆匆忙忙报名参加资格赛。资格赛分数足够，即将进入 Round 1。当时很欣喜，希望第一次就能够晋级。</p>
<p>　　之后尝试着做了几道 GCJ 往年的原题，发现题目不看题解做不出来—题目的新颖程度超出我的想象。于是决定把每道题目都”咬一遍”，待彻底束手无策时看题解。事实证明这种方法在看得懂题解的时候十分有效，凭着题解我很快解决并记住了几种想不出来的题目，并学会了新的解题方法。然而，由于顾及学业出勤和实验室的要求。练 GCJ 的时间断断续续，计划没有很好的持续下去。</p>
<p>　　1A 比赛遇到了字符串处理相关的题目，因为想不全情况，加之技艺不精，没有将通过率高的第一题解决。整场比赛下来只有第二题通过了两个样例。</p>
<p>　　1B 赛前受到了很大的心理打击。比赛当天拿不出应有的状态。</p>
<p>　　后来元气恢复，但是因为各种各样的事情没有多钻研一些 GCJ 原题，也没有研究一些好用的算法，相当于裸奔上街(1B期间沉迷B站，1C前一阵子还是偶尔上)。1C 的比赛依旧是爆炸的。第一题是水题，而第三题迟迟没想出来怎么做。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>　　1C 结束后很失落，因为这是第一次打规模这么大的比赛，但是投入了很多的信心，而且一开始投入了很多精力。</p>
<p>　　事实上对于我来说，第一次打 GCJ，成绩不好是肯定的。一来思考题目时找不到正确的方向，会随心所欲地想到各种地方(这其实是不了解的一种表现); 二是在遇到未知问题的时候不敢想，忽略了很多关键的原因和解决方案。多做题目增长见识，多看书，以及学一些数学、物理、英语等等(一定不要跟随老师的步骤，会很慢!)以便更快理解题目。</p>
<p>　　GCJ 的题目很新颖，对思维拓展效果很明显。平时也可以多练习一些原题。</p>
<p>　　明年再来！</p>
<p>　　最后祝各位挺进 Round 2 的大佬比赛顺利。</p>
]]></content>
      <tags>
        <tag>Google Code Jam</tag>
        <tag>Google Code Jam 2020</tag>
        <tag>GCJ</tag>
        <tag>GCJ2020</tag>
        <tag>Google</tag>
        <tag>谷歌</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim配置文件分享(不定期更新)</title>
    <url>/2020/02/19/Vimrc/</url>
    <content><![CDATA[<p>为了方便打CF配的vim环境。现分享给大家。<br>注意:测试环境为 Windows 10 x86_64，vim版本为 Vim 8.2(64 bit) ，请自行根据运行状况更改配置。</p>
<h4 id="2020-04-10-为方便更新，现不再粘贴配置至博客页面，请访问-Mr-Cose-vimrc-。欢迎所有访客！"><a href="#2020-04-10-为方便更新，现不再粘贴配置至博客页面，请访问-Mr-Cose-vimrc-。欢迎所有访客！" class="headerlink" title="2020-04-10 : 为方便更新，现不再粘贴配置至博客页面，请访问 Mr-Cose/vimrc 。欢迎所有访客！"></a>2020-04-10 : 为方便更新，现不再粘贴配置至博客页面，请访问 <a href="https://github.com/Mr-Cose/vimrc" target="_blank" rel="noopener">Mr-Cose/vimrc</a> 。欢迎所有访客！</h4><a id="more"></a>
<p>最近更新: <a href="#update">2020-03-15</a></p>
<p>2020-02-19</p>
<p>配置文件特点:<br>　　插入模式：更换四个方向键与k、j、h、l的功能。<br>　　Terminal(Windows CMD)：修改 winkey 为 <C-_>，支持 <C-_>“_num 粘贴操作; 添加 <C-V> 到 <C-_>“* 映射。<br>　　其他: 支持全屏和透明背景；支持打开 .cpp 文件时按 F6 在Terminal运行程序和一键编译并在控制台运行(错误信息会被忽略，慎用)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">" Vim with all enhancements</span></span><br><span class="line"><span class="string">source <span class="variable">$VIMRUNTIME</span>/vimrc_example.vim</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Remap a few keys <span class="keyword">for</span> Windows behavior</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$VIMRUNTIME</span>/mswin.vim</span><br><span class="line"></span><br><span class="line"><span class="string">" Use the internal diff if available.</span></span><br><span class="line"><span class="string">"</span> Otherwise use the special <span class="string">'diffexpr'</span> <span class="keyword">for</span> Windows.</span><br><span class="line"><span class="keyword">if</span> &amp;diffopt !~<span class="comment"># 'internal'</span></span><br><span class="line">  <span class="built_in">set</span> diffexpr=MyDiff()</span><br><span class="line">endif</span><br><span class="line"><span class="keyword">function</span> MyDiff()</span><br><span class="line">  <span class="built_in">let</span> opt = <span class="string">'-a --binary '</span></span><br><span class="line">  <span class="keyword">if</span> &amp;diffopt =~ <span class="string">'icase'</span> | <span class="built_in">let</span> opt = opt . <span class="string">'-i '</span> | endif</span><br><span class="line">  <span class="keyword">if</span> &amp;diffopt =~ <span class="string">'iwhite'</span> | <span class="built_in">let</span> opt = opt . <span class="string">'-b '</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg1 = v:fname_in</span><br><span class="line">  <span class="keyword">if</span> arg1 =~ <span class="string">' '</span> | <span class="built_in">let</span> arg1 = <span class="string">'"'</span> . arg1 . <span class="string">'"'</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg1 = substitute(arg1, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="built_in">let</span> arg2 = v:fname_new</span><br><span class="line">  <span class="keyword">if</span> arg2 =~ <span class="string">' '</span> | <span class="built_in">let</span> arg2 = <span class="string">'"'</span> . arg2 . <span class="string">'"'</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg2 = substitute(arg2, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="built_in">let</span> arg3 = v:fname_out</span><br><span class="line">  <span class="keyword">if</span> arg3 =~ <span class="string">' '</span> | <span class="built_in">let</span> arg3 = <span class="string">'"'</span> . arg3 . <span class="string">'"'</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg3 = substitute(arg3, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="variable">$VIMRUNTIME</span> =~ <span class="string">' '</span></span><br><span class="line">    <span class="keyword">if</span> &amp;sh =~ <span class="string">'\&lt;cmd'</span></span><br><span class="line">      <span class="keyword">if</span> empty(&amp;shellxquote)</span><br><span class="line">        <span class="built_in">let</span> l:shxq_sav = <span class="string">''</span></span><br><span class="line">        <span class="built_in">set</span> shellxquote&amp;</span><br><span class="line">      endif</span><br><span class="line">      <span class="built_in">let</span> cmd = <span class="string">'"'</span> . <span class="variable">$VIMRUNTIME</span> . <span class="string">'\diff"'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">let</span> cmd = substitute(<span class="variable">$VIMRUNTIME</span>, <span class="string">' '</span>, <span class="string">'" '</span>, <span class="string">''</span>) . <span class="string">'\diff"'</span></span><br><span class="line">    endif</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">let</span> cmd = <span class="variable">$VIMRUNTIME</span> . <span class="string">'\diff'</span></span><br><span class="line">  endif</span><br><span class="line">  <span class="built_in">let</span> cmd = substitute(cmd, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  silent execute <span class="string">'!'</span> . cmd . <span class="string">' '</span> . opt . arg1 . <span class="string">' '</span> . arg2 . <span class="string">' &gt; '</span> . arg3</span><br><span class="line">  <span class="keyword">if</span> exists(<span class="string">'l:shxq_sav'</span>)</span><br><span class="line">    <span class="built_in">let</span> &amp;shellxquote=l:shxq_sav</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="string">" ﾉﾏﾃ豬ﾄﾊﾇﾄｬﾈﾏﾅ葷ﾃ｣ｬﾏﾂﾃ賁ﾇﾊﾖｶｯﾌ晴ﾓｵﾄ｡｣</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">autocmd BufWritePost <span class="variable">$MYVIMRC</span> source <span class="variable">$MYVIMRC</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set guioptions-=m</span></span><br><span class="line"><span class="string">set guioptions-=T</span></span><br><span class="line"><span class="string">set guioptions-=r</span></span><br><span class="line"><span class="string">set guioptions-=l</span></span><br><span class="line"><span class="string">set guioptions-=b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set noundofile</span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">set smartindent</span></span><br><span class="line"><span class="string">set nu</span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string">set softtabstop=4</span></span><br><span class="line"><span class="string">set shiftwidth=4</span></span><br><span class="line"><span class="string">set expandtab</span></span><br><span class="line"><span class="string">set cin</span></span><br><span class="line"><span class="string">set autoindent</span></span><br><span class="line"><span class="string">"</span><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="built_in">set</span> gcr+=a:blinkon0</span><br><span class="line"><span class="built_in">set</span> guifont=Consolas:h15</span><br><span class="line"></span><br><span class="line">noremap j gj</span><br><span class="line">noremap gj j</span><br><span class="line">noremap gk k</span><br><span class="line">noremap k gk</span><br><span class="line">nnoremap i i&lt;Right&gt;</span><br><span class="line">nnoremap x i</span><br><span class="line">nnoremap s i&lt;Right&gt;</span><br><span class="line">inoremap &lt;C-K&gt; &lt;Up&gt;</span><br><span class="line">inoremap &lt;C-J&gt; &lt;Down&gt;</span><br><span class="line">inoremap &lt;C-H&gt; &lt;Left&gt;</span><br><span class="line">inoremap &lt;C-L&gt; &lt;Right&gt;</span><br><span class="line">inoremap &lt;Up&gt; &lt;C-J&gt;</span><br><span class="line">inoremap &lt;Down&gt; &lt;C-K&gt;</span><br><span class="line">inoremap &lt;Left&gt; &lt;C-H&gt;</span><br><span class="line">inoremap &lt;Right&gt; &lt;C-L&gt;</span><br><span class="line">inoremap &lt;C-O&gt; &lt;BS&gt;</span><br><span class="line"></span><br><span class="line">au GUIEnter * call libcallnr(<span class="string">"vimtweak64.dll"</span>, <span class="string">"SetAlpha"</span>, 210)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'gui_running'</span>) &amp;&amp; has(<span class="string">"win32"</span>)</span><br><span class="line">map &lt;F11&gt; :call libcallnr(<span class="string">"gvimfullscreen.dll.x64"</span>, <span class="string">"ToggleFullScreen"</span>, 0)&lt;CR&gt;</span><br><span class="line">inoremap &lt;F11&gt; &lt;ESC&gt; :call libcallnr(<span class="string">"gvimfullscreen.dll.x64"</span>, <span class="string">"ToggleFullScreen"</span>, 0)&lt;CR&gt;i</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">colorscheme torte</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'gui_running'</span>)</span><br><span class="line">    <span class="built_in">set</span> lines=38 columns=80</span><br><span class="line">    <span class="built_in">set</span> guioptions-=T</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">syntax on</span><br><span class="line">filetype plugin indent on</span><br><span class="line">autocmd BufNewFile,BufRead *.cpp <span class="built_in">exec</span> <span class="string">"call SetCppFile()"</span></span><br><span class="line"><span class="string">"autocmd BufNewFile,BufRead *.cpp exec "</span>call RunCpp()<span class="string">"</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead *.c exec "</span>call SetCppFile()<span class="string">"</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead *.l exec "</span>call RunWinexec()<span class="string">"</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead *.md exec "</span>call SetMdFile()<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if has('win32')</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    set enc=utf-8</span></span><br><span class="line"><span class="string">    set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span></span><br><span class="line"><span class="string">    set langmenu=zh_CN.UTF-8</span></span><br><span class="line"><span class="string">    source <span class="variable">$VIMRUNTIME</span>/delmenu.vim</span></span><br><span class="line"><span class="string">    source <span class="variable">$VIMRUNTIME</span>/menu.vim</span></span><br><span class="line"><span class="string">    language messages zh_CN.utf-8</span></span><br><span class="line"><span class="string">elseif has('unix')</span></span><br><span class="line"><span class="string">    set guifont=Monospace\ 12</span></span><br><span class="line"><span class="string">elseif has('mac')</span></span><br><span class="line"><span class="string">    set guifont=Monaco\ 12</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if has('win32') &amp;&amp; has('gui_running')</span></span><br><span class="line"><span class="string">    set termwinkey=&lt;C-_&gt;</span></span><br><span class="line"><span class="string">    tnoremap &lt;C-V&gt; &lt;C-_&gt;"</span>*</span><br><span class="line">    tnoremap &lt;s-insert&gt; &lt;C-_&gt;<span class="string">"0</span></span><br><span class="line"><span class="string">    tnoremap &lt;C-A&gt; &lt;C-\&gt;&lt;C-N&gt;</span></span><br><span class="line"><span class="string">    "</span>tnoremap &lt;C-C&gt; &lt;C-\&gt;&lt;C-N&gt; &lt;ESC&gt;: close! &lt;CR&gt;</span><br><span class="line">    tnoremap &lt;C-C&gt; &lt;C-C&gt; &lt;CR&gt; <span class="built_in">exit</span> &lt;CR&gt;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> RunWinexec() </span><br><span class="line">    <span class="keyword">if</span> has(<span class="string">'win32'</span>)</span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"! %"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"q"</span></span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SetMdFile()</span><br><span class="line">    inoremap // //</span><br><span class="line">    inoremap /tag - </span><br><span class="line">    inoremap /line &lt;CR&gt;&lt;!-- more --&gt;&lt;CR&gt;</span><br><span class="line">    inoremap /date -- &lt;ESC&gt;i&lt;ESC&gt;i&lt;ESC&gt;i </span><br><span class="line">    inoremap /time :: &lt;ESC&gt;i&lt;ESC&gt;i&lt;ESC&gt;i </span><br><span class="line">    inoremap /link []()&lt;ESC&gt;i&lt;ESC&gt;i&lt;ESC&gt;i</span><br><span class="line">    inoremap /code ``` bash&lt;CR&gt;```&lt;ESC&gt;O</span><br><span class="line">    inoremap /psgsp  　　</span><br><span class="line">    inoremap /a1 <span class="comment"># </span></span><br><span class="line">    inoremap /a2 <span class="comment">## </span></span><br><span class="line">    inoremap /a3 <span class="comment">### </span></span><br><span class="line">    inoremap /a4 <span class="comment">#### </span></span><br><span class="line">    inoremap /a5 <span class="comment">##### </span></span><br><span class="line">    inoremap /a6 <span class="comment">###### </span></span><br><span class="line">    inoremap /a7 <span class="comment">####### </span></span><br><span class="line"></span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> RunCpp()</span><br><span class="line">    <span class="keyword">if</span> has(<span class="string">'win32'</span>) &amp;&amp; has(<span class="string">'gui_running'</span>)</span><br><span class="line">        <span class="built_in">exec</span> <span class="string">" let @0=expand("</span>%&lt;.l<span class="string">") "</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"term"</span></span><br><span class="line">        execute(<span class="string">"silent! terminal&lt;C-_&gt;"</span>0<span class="string">")</span></span><br><span class="line"><span class="string">        execute("</span>silent! terminal.l &lt;CR&gt;<span class="string">")</span></span><br><span class="line"><span class="string">    elseif has('unix') </span></span><br><span class="line"><span class="string">        exec "</span>call Run()<span class="string">"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function SetCppFile()</span></span><br><span class="line"><span class="string">    inoremap ' ''&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">    inoremap "</span> <span class="string">""</span>&lt;ESC&gt;i</span><br><span class="line">    inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">    inoremap [ []&lt;ESC&gt;i</span><br><span class="line">    inoremap &#123; &#123; &lt;CR&gt;&#125; &lt;ESC&gt;O</span><br><span class="line">    inoremap &#125; &#123;&#125;&lt;ESC&gt;i</span><br><span class="line">    inoremap ; ; </span><br><span class="line">    inoremap , , </span><br><span class="line">    packadd termdebug</span><br><span class="line">    nmap &lt;script&gt; &lt;silent&gt; &lt;F4&gt; :call ToggleQuickfixList()&lt;CR&gt;</span><br><span class="line">    inoremap &lt;F5&gt; &lt;ESC&gt;: call Compile() &lt;CR&gt;</span><br><span class="line">    map &lt;F5&gt; : call Compile() &lt;CR&gt;</span><br><span class="line">    map &lt;C-F5&gt; : call Compile() &lt;CR&gt; : <span class="built_in">let</span> @0=expand(<span class="string">"%&lt;.l"</span>) &lt;CR&gt; : term &lt;CR&gt;&lt;C-_&gt;<span class="string">"0.l &lt;CR&gt;</span></span><br><span class="line"><span class="string">    inoremap &lt;C-F5&gt; &lt;ESC&gt;: call Compile() &lt;CR&gt; : let @0=expand("</span>%&lt;.l<span class="string">") &lt;CR&gt; : term &lt;CR&gt;&lt;C-_&gt;"</span>0.l &lt;CR&gt;</span><br><span class="line">    map &lt;F6&gt; : <span class="built_in">let</span> @0=expand(<span class="string">"%&lt;.l"</span>) &lt;CR&gt; : term &lt;CR&gt;&lt;C-_&gt;<span class="string">"0.l &lt;CR&gt;</span></span><br><span class="line"><span class="string">    map &lt;C-F6&gt; : call Run() &lt;CR&gt;</span></span><br><span class="line"><span class="string">    map &lt;F7&gt; : Termdebug %&lt;.l &lt;CR&gt;</span></span><br><span class="line"><span class="string">    map &lt;F8&gt; : call FormatCode()&lt;CR&gt;</span></span><br><span class="line"><span class="string">    set makeprg=g++\ %\ -o\ %&lt;.l\ -g\ -std=c++17\ -O2\ -Wall\ -Wextra\ -Wconversion</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Compile()</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    exec "</span>make<span class="string">"</span></span><br><span class="line"><span class="string">    "</span><span class="keyword">if</span> &amp;filetype == <span class="string">'cpp'</span></span><br><span class="line">    <span class="string">"    exec "</span>! g++ % -o %&lt;.l -c -g -std=c++17 -O2 -Wall -Wextra -Wconversion<span class="string">"</span></span><br><span class="line"><span class="string">    "</span>elseif &amp;filetype == <span class="string">'c'</span></span><br><span class="line">    <span class="string">"    exec "</span>! gcc % -o %&lt;.l -c -g -Wall -Wextra -Wconversion<span class="string">"</span></span><br><span class="line"><span class="string">    "</span>endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Run()</span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">'cpp'</span> || &amp;filetype == <span class="string">'c'</span></span><br><span class="line">        <span class="keyword">if</span> has(<span class="string">'win32'</span>)</span><br><span class="line">            <span class="built_in">exec</span> <span class="string">"! %&lt;.l"</span></span><br><span class="line">        elseif has(<span class="string">'unix'</span>)</span><br><span class="line">            <span class="built_in">exec</span> <span class="string">"!time ./%&lt;.l"</span></span><br><span class="line">        endif</span><br><span class="line">    elseif &amp;filetype == <span class="string">'sh'</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!bash %"</span></span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Build_And_Run()</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"make"</span></span><br><span class="line">    <span class="string">"call Compile()</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    call RunCpp()</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func! FormatCode()</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    if &amp;filetype == 'cpp' || &amp;filetype == 'C' || &amp;filetype == 'h'</span></span><br><span class="line"><span class="string">        exec "</span>!astyle --style=ansi -n %<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>e %<span class="string">"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function! s:GetBufferList() </span></span><br><span class="line"><span class="string">  redir =&gt;buflist </span></span><br><span class="line"><span class="string">  silent! ls </span></span><br><span class="line"><span class="string">  redir END </span></span><br><span class="line"><span class="string">  return buflist </span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function! ToggleQuickfixList()</span></span><br><span class="line"><span class="string">  for bufnum in map(filter(split(s:GetBufferList(), '\n'), 'v:val =~ "</span>Quickfix List<span class="string">"'), 'str2nr(matchstr(v:val, "</span>\\d\\+<span class="string">"))') </span></span><br><span class="line"><span class="string">    if bufwinnr(bufnum) != -1</span></span><br><span class="line"><span class="string">      cclocall Run() &lt;CR&gt;</span></span><br><span class="line"><span class="string">      return</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">  endfor</span></span><br><span class="line"><span class="string">  let winnr = winnr()</span></span><br><span class="line"><span class="string">  if exists("</span>g:toggle_list_copen_command<span class="string">")</span></span><br><span class="line"><span class="string">    exec(g:toggle_list_copen_command)</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    copen</span></span><br><span class="line"><span class="string">  endif</span></span><br><span class="line"><span class="string">  if winnr() != winnr</span></span><br><span class="line"><span class="string">    wincmd p</span></span><br><span class="line"><span class="string">  endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call plug#begin('<span class="variable">$VIM</span>/plugged')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plug 'preservim/nerdtree'</span></span><br><span class="line"><span class="string">Plug 'junegunn/vim-easy-align'</span></span><br><span class="line"><span class="string">Plug 'https://github.com/junegunn/vim-github-dashboard.git'</span></span><br><span class="line"><span class="string">Plug 'vim-airline/vim-airline'</span></span><br><span class="line"><span class="string">Plug 'vim-airline/vim-airline-themes'</span></span><br><span class="line"><span class="string">Plug 'luochen1990/rainbow'</span></span><br><span class="line"><span class="string">Plug 'Shougo/vimshell'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call plug#end()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let g:asyncrun_open = 8 </span></span><br><span class="line"><span class="string">let g:rainbow_active = 1</span></span><br><span class="line"><span class="string">"</span><span class="built_in">let</span> g:deoplete<span class="comment">#enable_at_startup = 1</span></span><br></pre></td></tr></table></figure>
<p><span id="update">2020-03-15</span></p>
<p>1.取消插入模式下方向键对 h、j、k、l 键的映射，因为真的不知道干嘛用。<br>2.取消插入模式下F11转全屏。因为出 bug。<br>3.没了，32位记得改一下关联的 dll 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">" Vim with all enhancements</span></span><br><span class="line"><span class="string">source <span class="variable">$VIMRUNTIME</span>/vimrc_example.vim</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Remap a few keys <span class="keyword">for</span> Windows behavior</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$VIMRUNTIME</span>/mswin.vim</span><br><span class="line"></span><br><span class="line"><span class="string">" Use the internal diff if available.</span></span><br><span class="line"><span class="string">"</span> Otherwise use the special <span class="string">'diffexpr'</span> <span class="keyword">for</span> Windows.</span><br><span class="line"><span class="keyword">if</span> &amp;diffopt !~<span class="comment"># 'internal'</span></span><br><span class="line">  <span class="built_in">set</span> diffexpr=MyDiff()</span><br><span class="line">endif</span><br><span class="line"><span class="keyword">function</span> MyDiff()</span><br><span class="line">  <span class="built_in">let</span> opt = <span class="string">'-a --binary '</span></span><br><span class="line">  <span class="keyword">if</span> &amp;diffopt =~ <span class="string">'icase'</span> | <span class="built_in">let</span> opt = opt . <span class="string">'-i '</span> | endif</span><br><span class="line">  <span class="keyword">if</span> &amp;diffopt =~ <span class="string">'iwhite'</span> | <span class="built_in">let</span> opt = opt . <span class="string">'-b '</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg1 = v:fname_in</span><br><span class="line">  <span class="keyword">if</span> arg1 =~ <span class="string">' '</span> | <span class="built_in">let</span> arg1 = <span class="string">'"'</span> . arg1 . <span class="string">'"'</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg1 = substitute(arg1, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="built_in">let</span> arg2 = v:fname_new</span><br><span class="line">  <span class="keyword">if</span> arg2 =~ <span class="string">' '</span> | <span class="built_in">let</span> arg2 = <span class="string">'"'</span> . arg2 . <span class="string">'"'</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg2 = substitute(arg2, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="built_in">let</span> arg3 = v:fname_out</span><br><span class="line">  <span class="keyword">if</span> arg3 =~ <span class="string">' '</span> | <span class="built_in">let</span> arg3 = <span class="string">'"'</span> . arg3 . <span class="string">'"'</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg3 = substitute(arg3, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="variable">$VIMRUNTIME</span> =~ <span class="string">' '</span></span><br><span class="line">    <span class="keyword">if</span> &amp;sh =~ <span class="string">'\&lt;cmd'</span></span><br><span class="line">      <span class="keyword">if</span> empty(&amp;shellxquote)</span><br><span class="line">        <span class="built_in">let</span> l:shxq_sav = <span class="string">''</span></span><br><span class="line">        <span class="built_in">set</span> shellxquote&amp;</span><br><span class="line">      endif</span><br><span class="line">      <span class="built_in">let</span> cmd = <span class="string">'"'</span> . <span class="variable">$VIMRUNTIME</span> . <span class="string">'\diff"'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">let</span> cmd = substitute(<span class="variable">$VIMRUNTIME</span>, <span class="string">' '</span>, <span class="string">'" '</span>, <span class="string">''</span>) . <span class="string">'\diff"'</span></span><br><span class="line">    endif</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">let</span> cmd = <span class="variable">$VIMRUNTIME</span> . <span class="string">'\diff'</span></span><br><span class="line">  endif</span><br><span class="line">  <span class="built_in">let</span> cmd = substitute(cmd, <span class="string">'!'</span>, <span class="string">'\!'</span>, <span class="string">'g'</span>)</span><br><span class="line">  silent execute <span class="string">'!'</span> . cmd . <span class="string">' '</span> . opt . arg1 . <span class="string">' '</span> . arg2 . <span class="string">' &gt; '</span> . arg3</span><br><span class="line">  <span class="keyword">if</span> exists(<span class="string">'l:shxq_sav'</span>)</span><br><span class="line">    <span class="built_in">let</span> &amp;shellxquote=l:shxq_sav</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="string">" ﾉﾏﾃ豬ﾄﾊﾇﾄｬﾈﾏﾅ葷ﾃ｣ｬﾏﾂﾃ賁ﾇﾊﾖｶｯﾌ晴ﾓｵﾄ｡｣</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">autocmd BufWritePost <span class="variable">$MYVIMRC</span> source <span class="variable">$MYVIMRC</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set guioptions-=m</span></span><br><span class="line"><span class="string">set guioptions-=T</span></span><br><span class="line"><span class="string">set guioptions-=r</span></span><br><span class="line"><span class="string">set guioptions-=l</span></span><br><span class="line"><span class="string">set guioptions-=b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set noundofile</span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">set smartindent</span></span><br><span class="line"><span class="string">set nu</span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string">set softtabstop=4</span></span><br><span class="line"><span class="string">set shiftwidth=4</span></span><br><span class="line"><span class="string">set expandtab</span></span><br><span class="line"><span class="string">set cin</span></span><br><span class="line"><span class="string">set autoindent</span></span><br><span class="line"><span class="string">"</span><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="built_in">set</span> gcr+=a:blinkon0</span><br><span class="line"><span class="built_in">set</span> guifont=Consolas:h15</span><br><span class="line"></span><br><span class="line">noremap j gj</span><br><span class="line">noremap gj j</span><br><span class="line">noremap gk k</span><br><span class="line">noremap k gk</span><br><span class="line">nnoremap x i</span><br><span class="line">nnoremap s i&lt;Right&gt;</span><br><span class="line">inoremap &lt;C-K&gt; &lt;Up&gt;</span><br><span class="line">inoremap &lt;C-J&gt; &lt;Down&gt;</span><br><span class="line">inoremap &lt;C-H&gt; &lt;Left&gt;</span><br><span class="line">inoremap &lt;C-L&gt; &lt;Right&gt;</span><br><span class="line">tnoremap &lt;C-K&gt; &lt;Up&gt;</span><br><span class="line">tnoremap &lt;C-J&gt; &lt;Down&gt;</span><br><span class="line">tnoremap &lt;C-H&gt; &lt;Left&gt;</span><br><span class="line">tnoremap &lt;C-L&gt; &lt;Right&gt;</span><br><span class="line">inoremap &lt;C-O&gt; &lt;BS&gt;</span><br><span class="line">tnoremap &lt;C-O&gt; &lt;BS&gt;</span><br><span class="line"></span><br><span class="line">au GUIEnter * call libcallnr(<span class="string">"vimtweak64.dll"</span>, <span class="string">"SetAlpha"</span>, 210)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'gui_running'</span>) &amp;&amp; has(<span class="string">"win32"</span>)</span><br><span class="line">map &lt;F11&gt; :call libcallnr(<span class="string">"gvimfullscreen.dll.x64"</span>, <span class="string">"ToggleFullScreen"</span>, 0)&lt;CR&gt;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">colorscheme torte</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'gui_running'</span>)</span><br><span class="line">    <span class="built_in">set</span> lines=38 columns=80</span><br><span class="line">    <span class="built_in">set</span> guioptions-=T</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">syntax on</span><br><span class="line">filetype plugin indent on</span><br><span class="line">autocmd BufNewFile,BufRead *.cpp <span class="built_in">exec</span> <span class="string">"call SetCppFile()"</span></span><br><span class="line"><span class="string">"autocmd BufNewFile,BufRead *.cpp exec "</span>call RunCpp()<span class="string">"</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead *.c exec "</span>call SetCppFile()<span class="string">"</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead *.l exec "</span>call RunWinexec()<span class="string">"</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead *.md exec "</span>call SetMdFile()<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if has('win32')</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    set enc=utf-8</span></span><br><span class="line"><span class="string">    set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span></span><br><span class="line"><span class="string">    set langmenu=zh_CN.UTF-8</span></span><br><span class="line"><span class="string">    source <span class="variable">$VIMRUNTIME</span>/delmenu.vim</span></span><br><span class="line"><span class="string">    source <span class="variable">$VIMRUNTIME</span>/menu.vim</span></span><br><span class="line"><span class="string">    language messages zh_CN.utf-8</span></span><br><span class="line"><span class="string">elseif has('unix')</span></span><br><span class="line"><span class="string">    set guifont=Monospace\ 12</span></span><br><span class="line"><span class="string">elseif has('mac')</span></span><br><span class="line"><span class="string">    set guifont=Monaco\ 12</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if has('win32') &amp;&amp; has('gui_running')</span></span><br><span class="line"><span class="string">    set termwinkey=&lt;C-_&gt;</span></span><br><span class="line"><span class="string">    tnoremap &lt;C-V&gt; &lt;C-_&gt;"</span>*</span><br><span class="line">    tnoremap &lt;s-insert&gt; &lt;C-_&gt;<span class="string">"0</span></span><br><span class="line"><span class="string">    tnoremap &lt;C-A&gt; &lt;C-\&gt;&lt;C-N&gt;</span></span><br><span class="line"><span class="string">    "</span>tnoremap &lt;C-C&gt; &lt;C-\&gt;&lt;C-N&gt; &lt;ESC&gt;: close! &lt;CR&gt;</span><br><span class="line">    tnoremap &lt;C-C&gt; &lt;C-C&gt; &lt;CR&gt; <span class="built_in">exit</span> &lt;CR&gt;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> RunWinexec() </span><br><span class="line">    <span class="keyword">if</span> has(<span class="string">'win32'</span>)</span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"! %"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"q"</span></span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SetMdFile()</span><br><span class="line">    inoremap // //</span><br><span class="line">    inoremap /tag - </span><br><span class="line">    inoremap /line &lt;CR&gt;&lt;!-- more --&gt;&lt;CR&gt;</span><br><span class="line">    inoremap /date -- &lt;ESC&gt;i&lt;ESC&gt;i&lt;ESC&gt;i </span><br><span class="line">    inoremap /time :: &lt;ESC&gt;i&lt;ESC&gt;i&lt;ESC&gt;i </span><br><span class="line">    inoremap /link []()&lt;ESC&gt;i&lt;ESC&gt;i&lt;ESC&gt;i</span><br><span class="line">    inoremap /code ``` bash&lt;CR&gt;```&lt;ESC&gt;O</span><br><span class="line">    inoremap /psgsp  　　</span><br><span class="line">    inoremap /a1 <span class="comment"># </span></span><br><span class="line">    inoremap /a2 <span class="comment">## </span></span><br><span class="line">    inoremap /a3 <span class="comment">### </span></span><br><span class="line">    inoremap /a4 <span class="comment">#### </span></span><br><span class="line">    inoremap /a5 <span class="comment">##### </span></span><br><span class="line">    inoremap /a6 <span class="comment">###### </span></span><br><span class="line">    inoremap /a7 <span class="comment">####### </span></span><br><span class="line"></span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> RunCpp()</span><br><span class="line">    <span class="keyword">if</span> has(<span class="string">'win32'</span>) &amp;&amp; has(<span class="string">'gui_running'</span>)</span><br><span class="line">        <span class="built_in">exec</span> <span class="string">" let @0=expand("</span>%&lt;.l<span class="string">") "</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"term"</span></span><br><span class="line">        execute(<span class="string">"silent! terminal&lt;C-_&gt;"</span>0<span class="string">")</span></span><br><span class="line"><span class="string">        execute("</span>silent! terminal.l &lt;CR&gt;<span class="string">")</span></span><br><span class="line"><span class="string">    elseif has('unix') </span></span><br><span class="line"><span class="string">        exec "</span>call Run()<span class="string">"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function SetCppFile()</span></span><br><span class="line"><span class="string">    inoremap ' ''&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">    inoremap "</span> <span class="string">""</span>&lt;ESC&gt;i</span><br><span class="line">    inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">    inoremap [ []&lt;ESC&gt;i</span><br><span class="line">    inoremap &#123; &#123; &lt;CR&gt;&#125; &lt;ESC&gt;O</span><br><span class="line">    inoremap &#125; &#123;&#125;&lt;ESC&gt;i</span><br><span class="line">    inoremap ; ; </span><br><span class="line">    inoremap , , </span><br><span class="line">    packadd termdebug</span><br><span class="line">    nmap &lt;script&gt; &lt;silent&gt; &lt;F4&gt; :call ToggleQuickfixList()&lt;CR&gt;</span><br><span class="line">    inoremap &lt;F5&gt; &lt;ESC&gt;: call Compile() &lt;CR&gt;</span><br><span class="line">    map &lt;F5&gt; : call Compile() &lt;CR&gt;</span><br><span class="line">    map &lt;C-F5&gt; : call Compile() &lt;CR&gt; : <span class="built_in">let</span> @0=expand(<span class="string">"%&lt;.l"</span>) &lt;CR&gt; : term &lt;CR&gt;&lt;C-_&gt;<span class="string">"0.l &lt;CR&gt;</span></span><br><span class="line"><span class="string">    inoremap &lt;C-F5&gt; &lt;ESC&gt;: call Compile() &lt;CR&gt; : let @0=expand("</span>%&lt;.l<span class="string">") &lt;CR&gt; : term &lt;CR&gt;&lt;C-_&gt;"</span>0.l &lt;CR&gt;</span><br><span class="line">    map &lt;F6&gt; : <span class="built_in">let</span> @0=expand(<span class="string">"%&lt;.l"</span>) &lt;CR&gt; : term &lt;CR&gt;&lt;C-_&gt;<span class="string">"0.l &lt;CR&gt;</span></span><br><span class="line"><span class="string">    map &lt;C-F6&gt; : call Run() &lt;CR&gt;</span></span><br><span class="line"><span class="string">    map &lt;F7&gt; : Termdebug %&lt;.l &lt;CR&gt;</span></span><br><span class="line"><span class="string">    map &lt;F8&gt; : call FormatCode()&lt;CR&gt;</span></span><br><span class="line"><span class="string">    set makeprg=g++\ %\ -o\ %&lt;.l\ -g\ -std=c++17\ -O2\ -Wall\ -Wextra\ -Wconversion </span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Compile()</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    exec "</span>make<span class="string">"</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Run()</span></span><br><span class="line"><span class="string">    if &amp;filetype == 'cpp' || &amp;filetype == 'c'</span></span><br><span class="line"><span class="string">        if has('win32')</span></span><br><span class="line"><span class="string">            exec "</span>! %&lt;.l<span class="string">"</span></span><br><span class="line"><span class="string">        elseif has('unix')</span></span><br><span class="line"><span class="string">            exec "</span>!time ./%&lt;.l<span class="string">"</span></span><br><span class="line"><span class="string">        endif</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'sh'</span></span><br><span class="line"><span class="string">        exec "</span>!bash %<span class="string">"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Build_And_Run()</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    exec "</span>make<span class="string">"</span></span><br><span class="line"><span class="string">    "</span>call Compile()</span><br><span class="line">    </span><br><span class="line">    call RunCpp()</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">func! FormatCode()</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">'cpp'</span> || &amp;filetype == <span class="string">'C'</span> || &amp;filetype == <span class="string">'h'</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!astyle --style=ansi -n %"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"e %"</span></span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>! s:GetBufferList() </span><br><span class="line">  redir =&gt;buflist </span><br><span class="line">  silent! ls </span><br><span class="line">  redir END </span><br><span class="line">  <span class="built_in">return</span> buflist </span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>! ToggleQuickfixList()</span><br><span class="line">  <span class="keyword">for</span> bufnum <span class="keyword">in</span> map(filter(split(s:GetBufferList(), <span class="string">'\n'</span>), <span class="string">'v:val =~ "Quickfix List"'</span>), <span class="string">'str2nr(matchstr(v:val, "\\d\\+"))'</span>) </span><br><span class="line">    <span class="keyword">if</span> bufwinnr(bufnum) != -1</span><br><span class="line">      cclocall Run() &lt;CR&gt;</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    endif</span><br><span class="line">  endfor</span><br><span class="line">  <span class="built_in">let</span> winnr = winnr()</span><br><span class="line">  <span class="keyword">if</span> exists(<span class="string">"g:toggle_list_copen_command"</span>)</span><br><span class="line">    <span class="built_in">exec</span>(g:toggle_list_copen_command)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    copen</span><br><span class="line">  endif</span><br><span class="line">  <span class="keyword">if</span> winnr() != winnr</span><br><span class="line">    wincmd p</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">call plug<span class="comment">#begin('$VIM/plugged')</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">'preservim/nerdtree'</span></span><br><span class="line">Plug <span class="string">'junegunn/vim-easy-align'</span></span><br><span class="line">Plug <span class="string">'https://github.com/junegunn/vim-github-dashboard.git'</span></span><br><span class="line">Plug <span class="string">'vim-airline/vim-airline'</span></span><br><span class="line">Plug <span class="string">'vim-airline/vim-airline-themes'</span></span><br><span class="line">Plug <span class="string">'luochen1990/rainbow'</span></span><br><span class="line">Plug <span class="string">'Shougo/vimshell'</span></span><br><span class="line"></span><br><span class="line">call plug<span class="comment">#end()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:asyncrun_open = 8 </span><br><span class="line"><span class="built_in">let</span> g:rainbow_active = 1</span><br><span class="line"><span class="string">"let g:deoplete#enable_at_startup = 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vim</tag>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Code Jam 2020 Qualification Round 总结</title>
    <url>/2020/04/05/gcj2020qf/</url>
    <content><![CDATA[<p>　　偶然发现2020年的GCJ开始报名了。于是踊跃报名。报名后将GCJ的热身赛拿下42分，获得比赛资格(分数达到30才有正式比赛资格)。很可惜的是不熟悉互动题的操作，以及自然拉丁矩阵加强版少考虑了情况。<br>　　这里给出前三题的解法。注意中国大陆网络可能无法正常访问原题目所在网站。</p>
<a id="more"></a>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="Vestigium-7-pts"><a href="#Vestigium-7-pts" class="headerlink" title="Vestigium ( 7 pts )"></a>Vestigium ( 7 pts )</h3><p>　　热身赛限时20秒，限内存 1GB，莽就行了。把 i 行 i 列的元素快排然后遍历。当第 i 行/列 有重复元素时将其计数器加一。别忘记把对角线上的值记下来。<br>　　代码: <a href="https://github.com/Mr-Cose/Cosworkshop/blob/master/GCJ%E5%BE%80%E5%B9%B4%E6%AF%94%E8%B5%9B%E7%BB%83%E4%B9%A0/2020/GCJ2020_Qualification/a.cpp" target="_blank" rel="noopener">GitHub</a></p>
<h3 id="Nesting-Depth-7-pts-15-pts"><a href="#Nesting-Depth-7-pts-15-pts" class="headerlink" title="Nesting Depth ( 7 pts, 15 pts )"></a>Nesting Depth ( 7 pts, 15 pts )</h3><p>　　题意很好理解，即: 数字前面的数比其小，加相差大小等量的左括号。那么记录当前值，遍历到比当前值大的数字时加左括号，反之加右括号。注意第一个数和最后一个数要特判。<br>　　代码: <a href="https://github.com/Mr-Cose/Cosworkshop/blob/master/GCJ%E5%BE%80%E5%B9%B4%E6%AF%94%E8%B5%9B%E7%BB%83%E4%B9%A0/2020/GCJ2020_Qualification/b.cpp" target="_blank" rel="noopener">GitHub</a></p>
<h3 id="Parenting-Partnering-Returns-7-pts-12-pts"><a href="#Parenting-Partnering-Returns-7-pts-12-pts" class="headerlink" title="Parenting Partnering Returns ( 7 pts, 12 pts )"></a>Parenting Partnering Returns ( 7 pts, 12 pts )</h3><p>　　即两个人轮流分担差事，碰到两个人都无法顾及的时间段输出”IMPOSSIBLE”。按活动开始时间排序并遍历，记录每个人进行到的活动的结束时间。若甲的上一项活动结束时间晚于开始时间，则分担给乙。若乙的情况也如此，则无解。<br>　　排序前需先记录下活动的下标，因为输出是按下标的顺序来的！<br>　　代码: <a href="https://github.com/Mr-Cose/Cosworkshop/blob/master/GCJ%E5%BE%80%E5%B9%B4%E6%AF%94%E8%B5%9B%E7%BB%83%E4%B9%A0/2020/GCJ2020_Qualification/c.cpp" target="_blank" rel="noopener">GitHub</a></p>
<h3 id="ESAb-ATAd-1-pts-9-pts-16-pts-略"><a href="#ESAb-ATAd-1-pts-9-pts-16-pts-略" class="headerlink" title="ESAb ATAd ( 1 pts, 9 pts, 16 pts ) (略)"></a>ESAb ATAd ( 1 pts, 9 pts, 16 pts ) (略)</h3><h3 id="Indicium-7-pts-25-pts-未解决"><a href="#Indicium-7-pts-25-pts-未解决" class="headerlink" title="Indicium ( 7 pts, 25 pts ) (未解决)"></a>Indicium ( 7 pts, 25 pts ) (未解决)</h3><p>　　开始以为按照 (k%n)==0 来判断即可。但实际上情况不单一QWQ！当 n 为奇数时，n(n+1)/2==k 也可以达成目的; n 为偶数时情况就更多了！例如: </p>
<p>Input<br>4 14<br>Output<br>4 1 2 3<br>1 3 4 2<br>2 4 3 1<br>3 2 1 4</p>
<p>　　只要满足对角线上的数加起来为 k 且同行同列没有重复元素就行，随便怎么跑。<br>　　因此想要深入了解计算机学，还是需要下功夫啊。<br>　　未完成的代码在这，欢迎迫害。<a href="https://github.com/Mr-Cose/Cosworkshop/blob/master/GCJ%E5%BE%80%E5%B9%B4%E6%AF%94%E8%B5%9B%E7%BB%83%E4%B9%A0/2020/GCJ2020_Qualification/e.cpp" target="_blank" rel="noopener">GitHub</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　GCJ 的 C++ 编译环境: Debian 9.8 stretch(amd64)。栈限制<code>ulimit -s 65536</code>。c++ 编译器是 6.3.0 版本的 gcc，参数是 </p>
<pre><code class="lang-bash">g++ Solution.cc -std=c++14 -pthread -O3 -o Solution
</code></pre>
<p>　　一开始并没仔细看规则，结果在代码中添加了 #ifndef ONLINE_JUDGE(评测机参数没定义) 读取输入文件的环节，结果超时了。<br>　　所以比赛规则还是要仔细看啊。如果看不懂就多练练英语。<br>　　很高兴能够获得GCJ比赛的入场券，那个激动啊。希望能够拿到好名次，我好想要那件T恤QwQ。。。<br>　　最后，祝光顾本博的朋友在GCJ打出好名次。冲！</p>
<p>　　做题记录: <a href="https://github.com/Mr-Cose/Cosworkshop/tree/master/GCJ%E5%BE%80%E5%B9%B4%E6%AF%94%E8%B5%9B%E7%BB%83%E4%B9%A0/2020/GCJ2020_Qualification" target="_blank" rel="noopener">GitHub</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Google Code Jam</tag>
        <tag>GCJ</tag>
        <tag>GCJ2020</tag>
        <tag>Google</tag>
        <tag>谷歌</tag>
        <tag>Google Code Jam 2020 Qualification Round</tag>
      </tags>
  </entry>
  <entry>
    <title>中国剩余定理介绍</title>
    <url>/2020/04/29/chinesereminder/</url>
    <content><![CDATA[<p>　　中国剩余定理是一种通过得到一个未知数用若干个数取模得到的相应的结果来求得原未知数的大小的一种方法。求解过程时间复杂度低，答案准确。要求是用于取模的数之积必须大于原未知数，否则比其更大的未知数会被取模而导致错误。此外，如果取模数之间不互质(互质要求最大公因数为 1)则必须先通过拓展中国剩余定理拆分方程组。</p>
<a id="more"></a>
<p>　　中国剩余定理的求解方程: $\sum_{i=1}^n{a_i} \cdot M_i \cdot M^{-1}_i$</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>模板</tag>
        <tag>中国剩余定理</tag>
        <tag>CRT</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Code Jam 答题模板分享 ( C++ )</title>
    <url>/2020/04/10/gcjtemplate/</url>
    <content><![CDATA[<p>　　发帖日期10号，明天就是GCJ的 1A 回合。在这里将我准备的答题模板分享出来。如果没看到也没关系，参加 1B、1C 也可以用到。祝各位比赛顺利！</p>
<p>地址: <a href="https://github.com/Mr-Cose/Cosworkshop/tree/master/Answer_Template/GoogleCodeJam" target="_blank" rel="noopener">GitHub</a><br><a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> _tp <span class="title">ri</span><span class="params">(_tp &amp;_var)</span> </span>&#123; _var=<span class="number">0</span>; <span class="keyword">bool</span> _ng=<span class="number">0</span>; <span class="keyword">char</span> _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd&lt;<span class="string">'0'</span> || _rd&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd==<span class="string">'-'</span>)&#123;_ng=<span class="number">1</span>; &#125; _rd=(<span class="keyword">char</span>)getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=_rd &amp;&amp; _rd&lt;=<span class="string">'9'</span>) _var=_var*<span class="number">10</span>+(_tp)_rd<span class="number">-48</span>, _rd=(<span class="keyword">char</span>)getchar(); </span><br><span class="line">    <span class="keyword">if</span>(_ng)&#123;_var*=<span class="number">-1</span>; &#125; <span class="keyword">return</span> _var; &#125; </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">wo</span><span class="params">(_tp _var, <span class="keyword">int</span> _nli=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">static</span> <span class="keyword">char</span> _wri[<span class="number">36</span>]; <span class="keyword">int</span> _tpi=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(_var&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>), _var*=<span class="number">-1</span>; &#125; <span class="keyword">do</span>&#123;_wri[_tpi++]=(<span class="keyword">char</span>)((_var%<span class="number">10</span>)+<span class="number">48</span>), _var/=<span class="number">10</span>; &#125;<span class="keyword">while</span>(_var); </span><br><span class="line">    <span class="keyword">while</span>(_tpi) <span class="built_in">putchar</span>(_wri[--_tpi]); </span><br><span class="line">    <span class="keyword">if</span>(_nli)&#123;_nli==<span class="number">2</span> ? <span class="built_in">putchar</span>(<span class="string">' '</span>) : <span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125; <span class="keyword">return</span> <span class="number">1</span>; &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld long double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdi pair<span class="meta-string">&lt;double, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pid pair<span class="meta-string">&lt;int, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pli pair<span class="meta-string">&lt;long long, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pil pair<span class="meta-string">&lt;int, long long&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll pair<span class="meta-string">&lt;long long, long long&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">2114514810</span>; </span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//int Cases= ri(Cases); </span></span><br><span class="line">    <span class="comment">//ri(n); //ri(m); </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> Cases= ri(Cases) , tcs=<span class="number">1</span>; tcs&lt;=Cases; tcs++) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #"</span>); wo(tcs); <span class="built_in">putchar</span>(<span class="string">':'</span>); <span class="built_in">putchar</span>(<span class="string">' '</span>); </span><br><span class="line">        init(); </span><br><span class="line">        solve(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Google Code Jam</tag>
        <tag>GCJ</tag>
        <tag>GCJ2020</tag>
        <tag>Google</tag>
        <tag>谷歌</tag>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title>wenhao</title>
    <url>/2020/03/15/wenhao/</url>
    <content><![CDATA[<p>神秘代码</p>
<a id="more"></a>
<p>〇: 9⑨ 8244 35  (已故)         3</p>
<p>①:  1 5 2 2 7 5 9 4 5</p>
]]></content>
      <tags>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World,世界,你好</title>
    <url>/2020/02/13/hello-world/</url>
    <content><![CDATA[<p>　　2020年中旬，在各种磕磕碰碰和摸爬滚打下完成了博客的基础搭建。我认为一个博客最重要的功能是可以将自己的想法分享给别人，同时让其他的人可以了解自己，促进交流。希望接下来的时间里Co Blog可以创造更多的精神财富,同时让我本身得到指导和进步。加油!加油!</p>
<p>　　本博主要分享关于博主(一个苦逼算法竞赛小萌新)练习题目和参加比赛的经验、心得体会等等内容，偶尔在博客发上几句废话。如果博客可以帮助到苦苦百度无果的你，那么将是我的荣幸。欢迎您的到来!!!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;<span class="built_in">printf</span>(<span class="string">"欢迎欢迎,我是小钴,呐呐呐~"</span>);<span class="built_in">return</span> 0;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>大总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【题解】【UVA-11572】Unique Snowflakes</title>
    <url>/2020/02/26/uva-11572/</url>
    <content><![CDATA[<p>时间限制: 2000 ms</p>
<a id="more"></a>
<p>Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a machine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow, one by one, into a package. Once the package is full, it is closed and shipped to be sold. </p>
<p>The marketing motto for the company is “bags of uniqueness.” To live up to the motto, every snowflake in a package must be different from the others. Unfortunately, this is easier said than done, because in reality, many of the snowflakes flowing through the machine are identical. Emily would like to know the size of the largest possible package of unique snowflakes that can be created. The machine can start filling the package at any time, but once it starts, all snowflakes flowing from the machine must go into the package until the package is completed and sealed. The package can be completed and sealed before all of the snowflakes have flowed out of the machine. </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing an integer n, the number of snowflakes processed by the machine. The following n lines each contain an integer (in the range 0 to 10^9, inclusive) uniquely identifying a snowflake. Two snowflakes are identified by the same integer if and only if they are identical. </p>
<p>The input will contain no more than one million total snowflakes. </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case output a line containing single integer, the maximum number of unique snowflakes that can be in a package.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>1<br>5<br>1<br>2<br>3<br>2<br>1</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>3</p>
<h2 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h2><p>　　给你一组数字，要求从中截取一段，使这一段中的数字不出现重复的前提下长度最大。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>　　没有规律。可以用模拟法。</p>
<p>　　从第一个数开始遍历，每遍历到一个未出现的数就将长度加 1，并记录它的出现位置。当出现重复的数字时，将当前选段长度记录。从重复数字的第一个出现位置开始遍历，每遍历到一个数就将出现位置与选段开始的位置比较，如果在选段开始的位置后，说明选段已经有这个数，就将该选段的长度与之前选段的长度比较，并保存最长的，重复上述操作; 反之将长度加 1。</p>
<p>　　上面分析为前言。(懂的都懂不用讲吧？？)</p>
<p>　　这道题需要注意如何记录出现数字的位置。如果使用数组对某个数在这个数组以这个数为下标对应的值来记录出现位置的话，会导致编译错误或是 MLE 等情况，因为编译器(本人 gcc 8.1/9.2 都试过，在全局变量)不支持大小 1e9 的数组。而题目给定的数字数量不超过一百万。这个时候就需要对数字进行离散化处理。使用 STL::map 对每一个关键词设定相应的值。数据为一百万条，map 占用的空间比数组小得多; 而 map 的查询复杂度是 O(log(n))，遍历n个数字会产生 O(n*log(n)) 的时间，log(1000000) 相当于 14，时间和空间就可以得到保证了。</p>
<p>　　对于本人来说，这道题对离散化思想进行了启蒙。利用并查集解决的 <a href="http://uoj.ac/problem/127" target="_blank" rel="noopener">程序自动分析</a> 对离散化思想也有很好的开导。</p>
<p>　　AC代码(C++):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include&lt;map&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std; </span><br><span class="line"></span><br><span class="line">inline int <span class="function"><span class="title">inpi</span></span>() &#123; int _i32_=0, _neg_=1; char _rd_=(char)getchar(); </span><br><span class="line">    <span class="keyword">while</span>(_rd_&lt;<span class="string">'0'</span> || _rd_&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span>(_rd_ == <span class="string">'-'</span>) _neg_=-1; </span><br><span class="line">        _rd_=(char)getchar(); &#125; </span><br><span class="line">    <span class="keyword">while</span>(_rd_&gt;=<span class="string">'0'</span> &amp;&amp; _rd_&lt;=<span class="string">'9'</span>) _i32_=_i32_*10 + (int)_rd_-48, _rd_=(char)getchar(); </span><br><span class="line">    <span class="built_in">return</span> _i32_ * _neg_; &#125; </span><br><span class="line">inline void oupi(int _i32_) &#123; static int _wri_[32]; int _top_=0; </span><br><span class="line">    <span class="keyword">if</span>(_i32_&lt;0) &#123; putchar(<span class="string">'-'</span>), _i32_*=-1; &#125;</span><br><span class="line">    <span class="keyword">do</span>&#123; _wri_[_top_++] = _i32_ %10, _i32_/=10; &#125; <span class="keyword">while</span>(_i32_); </span><br><span class="line">    <span class="keyword">while</span>(_top_) putchar(_wri_[--_top_]+48); &#125; </span><br><span class="line"></span><br><span class="line">//快速读入、输出整数，对大量数据的读入有优化</span><br><span class="line"></span><br><span class="line">int maxi(int _temp1_, int _temp2_) &#123; <span class="built_in">return</span> (_temp2_ &amp; ((_temp1_ - _temp2_) &gt;&gt; 31)) | (_temp1_ &amp; (~(_temp1_ - _temp2_) &gt;&gt; 31)); &#125;  </span><br><span class="line">int mini(int _temp1_, int _temp2_) &#123; <span class="built_in">return</span> (_temp1_ &amp; ((_temp1_ - _temp2_) &gt;&gt; 31)) | (_temp2_ &amp; (~(_temp1_ - _temp2_) &gt;&gt; 31)); &#125; </span><br><span class="line"></span><br><span class="line">//手写整数比大小，比STL略快</span><br><span class="line"></span><br><span class="line"><span class="comment">#define maxn 1000000</span></span><br><span class="line"></span><br><span class="line">int n, a[maxn|1]; </span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123; </span><br><span class="line">    <span class="keyword">for</span>(int Case=inpi(), cas=1; cas&lt;=Case; cas++) &#123; </span><br><span class="line">        n=inpi(); </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int i=1; i&lt;=n; i++) a[i]=inpi(); </span><br><span class="line">        int mx=0, cmbo=0, st=1; </span><br><span class="line">        map&lt;int, int&gt; m;  //std::map.避免用int数组导致编译错误</span><br><span class="line">        <span class="keyword">for</span>(int i=1; i&lt;=n; i++) &#123; </span><br><span class="line">            int t=m[a[i]]; </span><br><span class="line">            <span class="keyword">if</span>(t&gt;=st) &#123; </span><br><span class="line">                mx=maxi(mx, cmbo); </span><br><span class="line">                cmbo=i-t;  //直接将长度设为新起始点到当前位置的长度,避免从前面开始导致时间复杂度过高</span><br><span class="line">                st=t+1;  //重复数的后一位开始</span><br><span class="line">                m[a[i]]=i;  //由于之前的数在新的子串已经不存在了，需要更新为当前位置</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                cmbo++; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i==n) &#123; </span><br><span class="line">                    mx=maxi(mx, cmbo); </span><br><span class="line">                    <span class="built_in">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">                </span><br><span class="line">                m[a[i]]=i; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        oupi(mx); putchar(<span class="string">'\n'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">return</span> 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>题解</tag>
        <tag>UVA</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
</search>
